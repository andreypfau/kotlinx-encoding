package io.github.andreypfau.kotlinx.encoding.hex

import kotlin.experimental.or

private val HEX_UPPERCASE = "0123456789ABCDEF".toCharArray()
private val HEX = "0123456789abcdef".toCharArray()
private val REVERSE_TABLE = ubyteArrayOf(
    0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu,
    0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu,
    0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu,
    0x00u, 0x01u, 0x02u, 0x03u, 0x04u, 0x05u, 0x06u, 0x07u, 0x08u, 0x09u, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu,
    0xFFu, 0x0Au, 0x0Bu, 0x0Cu, 0x0Du, 0x0Eu, 0x0Fu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu,
    0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu,
    0xFFu, 0x0Au, 0x0Bu, 0x0Cu, 0x0Du, 0x0Eu, 0x0Fu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu,
    0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu,
    0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu,
    0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu,
    0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu,
    0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu,
    0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu,
    0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu,
    0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu,
    0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu, 0xFFu,
).asByteArray()

public open class Hex private constructor(
    private val isUppercase: Boolean
) {
    private val digits = if (isUppercase) HEX_UPPERCASE else HEX

    public fun encode(
        source: ByteArray,
        startIndex: Int = 0,
        endIndex: Int = source.size
    ): String {
        val result = CharArray((endIndex - startIndex) * 2)
        var resultIndex = 0
        val digits = digits

        for (index in startIndex until endIndex) {
            val b = source[index].toInt() and 0xFF
            result[resultIndex++] = digits[b shr 4]
            result[resultIndex++] = digits[b and 0x0f]
        }

        return result.concatToString()
    }

    public fun decode(
        source: String,
        startIndex: Int = 0,
        endIndex: Int = source.length
    ): ByteArray = decodeIntoByteArray(
        source = source,
        destination = ByteArray((endIndex - startIndex) / 2),
        startIndex = startIndex,
        endIndex = endIndex
    )

    public fun decodeIntoByteArray(
        source: String,
        destination: ByteArray,
        destinationOffset: Int = 0,
        startIndex: Int = 0,
        endIndex: Int = source.length
    ): ByteArray {
        for (idx in startIndex until (endIndex / 2)) {
            val srcIdx = idx * 2
            val high = (REVERSE_TABLE[source[srcIdx].code].toInt() shl 4).toByte()
            val low = REVERSE_TABLE[source[srcIdx + 1].code]
            destination[idx + destinationOffset] = (high or low)
        }
        return destination
    }

    public companion object Default : Hex(isUppercase = false) {
        public val Uppercase: Hex = Hex(isUppercase = true)
    }
}

public inline fun String.decodeHex(): ByteArray = Hex.decode(this)
public inline fun ByteArray.encodeHex(): String = Hex.encode(this)

public inline fun hex(value: String): ByteArray = Hex.decode(value)
public inline fun hex(value: ByteArray): String = Hex.encode(value)
